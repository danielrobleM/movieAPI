//
//  DetailMovieViewController.swift
//  themoviedb
//
//  Created by Daniel Roble on 3/6/19.
//  Copyright (c) 2019 Daniel Roble. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailMovieDisplayLogic: class {
    func presentUI(viewModel: DetailMovie.UI.ViewModel)
}

/// I dont have time to make Controller Presentation Transitions, sorry for that approach
class DetailMovieViewController: UIViewController, DetailMovieDisplayLogic {
    var interactor: DetailMovieBusinessLogic?
    var router: (NSObjectProtocol & DetailMovieRoutingLogic & DetailMovieDataPassing)?
    let margin: CGFloat = 15
    let containerView: UIView = {
        let view = UIView()
        view.layer.cornerRadius = 30.0
        view.backgroundColor = UIColor(red:0.13, green:0.13, blue:0.14, alpha:1.00)
        view.layer.borderColor = UIColor.gray.cgColor
        view.layer.borderWidth = 1.0
        return view
    }()

    let posterImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        imageView.clipsToBounds = true
        imageView.backgroundColor = .clear
        return imageView
    }()

    let titleLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = NSTextAlignment.left
        label.numberOfLines = 0
        label.textColor = .white
        label.font = UIFont.systemFont(ofSize: 26, weight: .bold)
        return label
    }()

    let overviewTitleLabel: UILabel = {
        let label = UILabel()
        label.text = "Story Line:"
        label.textAlignment = NSTextAlignment.left
        label.textColor = .white
        label.font = UIFont.systemFont(ofSize: 17, weight: .bold)
        return label
    }()

    let voteAverageLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = NSTextAlignment.left
        label.textColor = .white
        label.font = UIFont.systemFont(ofSize: 13, weight: .medium)
        return label
    }()

    let overviewLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = NSTextAlignment.left
        label.textColor = .white
        label.numberOfLines = 0
        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)
        return label
    }()


    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = DetailMovieInteractor()
        let presenter = DetailMoviePresenter()
        let router = DetailMovieRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        interactor?.displayUI(request: DetailMovie.UI.Request())
    }

    func setupView() {
        view.backgroundColor = .clear
        let height = view.frame.size.height * 0.7

        view.addSubview(containerView)

        containerView.addSubview(posterImageView)
        let imageHeight = height  * 0.4
        posterImageView.snp.makeConstraints { (make) in
            make.top.equalToSuperview().offset(margin)
            make.leading.equalToSuperview().offset(5)
            make.width.equalTo(imageHeight)
            make.height.equalTo(imageHeight).multipliedBy(3 / 2)
        }

        containerView.addSubview(titleLabel)
        titleLabel.snp.makeConstraints { (make) in
            make.leading.equalTo(posterImageView.snp.trailing)
            make.top.equalTo(posterImageView.snp.top)
            make.trailing.equalToSuperview().offset(-5)
        }

        containerView.addSubview(voteAverageLabel)
        voteAverageLabel.snp.makeConstraints { (make) in
            make.leading.equalTo(posterImageView.snp.trailing)
            make.top.equalTo(titleLabel.snp.bottom).offset(margin)
            make.trailing.equalToSuperview().offset(-margin)
        }

        containerView.addSubview(overviewTitleLabel)
        overviewTitleLabel.snp.makeConstraints { (make) in
            make.top.equalTo(posterImageView.snp.bottom).offset(margin)
            make.leading.equalTo(view.snp.leading).offset(margin * 2 )
            make.trailing.equalToSuperview().offset(margin)
            make.height.equalTo(20)
        }

        containerView.addSubview(overviewLabel)
        overviewLabel.snp.makeConstraints { (make) in
            make.top.equalTo(overviewTitleLabel.snp.bottom).offset(margin)
            make.leading.equalTo(view.snp.leading).offset(margin * 2 )
            make.trailing.equalToSuperview().offset(-margin)
            make.bottom.equalTo(view.snp.bottom).offset(-margin * 2)
        }

        containerView.snp.makeConstraints { (make) in
            make.leading.equalToSuperview().offset(-5)
            make.trailing.equalToSuperview().offset(5)
            make.bottom.equalTo(overviewLabel.snp.bottom).offset(height * 0.2)
        }

        let gesture = UITapGestureRecognizer(target: self, action:  #selector (self.onDismissTouched (_:)))
        gesture.delegate = self
        view.addGestureRecognizer(gesture)
    }

    @objc func onDismissTouched( _ sender:UITapGestureRecognizer) {
        router?.routeToDismiss()
    }

    func presentUI(viewModel: DetailMovie.UI.ViewModel) {
        /// these use its owns thread
        posterImageView.sd_setImage(with: viewModel.posterURL, completed: nil)
        DispatchQueue.main.async {
            self.titleLabel.text = viewModel.title

            let averageText = NSMutableAttributedString.init(string: "Review: \(viewModel.voteAverage)")

            averageText.setAttributes([NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16, weight: .bold), NSAttributedString.Key.foregroundColor: UIColor.white], range: NSMakeRange(0, 7))

            self.overviewLabel.text = viewModel.overview
            self.voteAverageLabel.attributedText = averageText
        }
    }
}

extension DetailMovieViewController: UIGestureRecognizerDelegate {
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        if let view = touch.view, view.isDescendant(of: containerView) {
            return false
        }
        return true
    }
}
